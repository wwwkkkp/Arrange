//深入函数的调用堆栈、返回值及调用约定

//函数的调用堆栈
1.栈帧：
	栈帧也叫过程活动记录，是编译器用来实现过程/函数调用的一种数据结构。
	一个函数执行时需要向栈中存入 函数入参、出参、返回地址和上一个栈帧的栈底指针等信息，（函数参数的读取是从右向左读取，因为是栈，调用的时候是从左向右调用）
	调用一个函数 在栈中产生空间 叫做这个函数的 栈帧 。
	注意：栈帧的大小是不固定的

2.ebp,esp:
	寄存器，分别指向最新的一个栈帧的底部(ebp)和顶部(esp)，esp也是整个栈的顶部，ebp中的地址是调用该函数的首地址
	在调用一个新函数的时候，首先将ebp指向esp，作为寻址用，也就是调用这个函数的函数栈帧顶部地址，然后随着参数等信息的存入，esp随之移动


举例：

int a(int x,int y){}
int main(){
	a(0,0);
}

调用main()函数时：
地址 (地址变化不太严谨)
0x32   main函数的栈帧底地址（指向调用main函数的mainCRTStartup()的栈帧顶部地址）   		 <-ebp

0x24   main函数的栈帧顶部地址        <-esp

0x20   main函数的栈底地址(0x32)            <-ebp  在调用新函数的时候，把ebp指向上一个函数esp的位置，在真正调用新函数之前，会把当前函数的栈帧底地址存入,并查集

调用a函数：

0x16   a函数的栈帧顶部地址			<-esp 随着参数等信息的放入继续移动esp


/**
调用一个函数时，先将堆栈原先的基址（EBP）入栈，以保存之前任务的信息。
然后将栈顶指针的值赋给EBP，将之前的栈顶作为新的基址（栈底），然后再这个基址上开辟相应的空间用作被调用函数的堆栈。
函数返回后，从EBP中可取出之前的ESP值，使栈顶恢复函数调用前的位置；再从恢复后的栈顶可弹出之前的EBP值，因为这个值在函数调用前一步被压入堆栈。
这样，EBP和ESP就都恢复了调用前的位置，堆栈恢复函数调用前的状态。
*/