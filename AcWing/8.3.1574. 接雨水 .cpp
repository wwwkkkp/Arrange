
//8.3.1574. 接雨水 

给定 n个非负整数表示每个宽度为 1的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
例如，当给定数字序列为 0,1,0,2,1,0,1,3,2,1,2,1 时，柱子高度图如下所示，最多可以接 6个单位的雨水。 
 
输入格式
第一行包含整数 n。
第二行包含 n个非负整数。

输出格式
输出一个整数，表示最大接水量。

数据范围
1≤n≤105
序列中元素均不大于1000。

输入样例：
12
0 1 0 2 1 0 1 3 2 1 2 1
输出样例：
6





//单调栈问题，单调递减
//这个问题的面积求解比较复杂，还是看视频吧
#include<iostream>
using namespace std;

const int N=100010;

int n;
int h[N],l[N];
int q[N];

int main(){
    cin>>n;
    for(int i=1;i<=n;i++)cin>>h[i];
    h[0]=h[n+1]=0;
    
    int tt=0;
    q[0]=0;
    int res=0;
    for(int i=1;i<=n;i++){
        int v=0;
        while(tt>=1&&h[q[tt]]<h[i]){  //h[q[tt]]是一个单调递减的堆栈，用于i一次查找比h[i]小的数，求面积，直到 h[q[tt]]>=h[i]
           res+= (i-q[tt]-1)*(h[q[tt]]-v);
           v=h[q[tt]];
           tt--;
        }
        if(tt>=1&&h[q[tt]]>=h[i])  //tt>=1是保证单调栈边界，不能超过这个边界
            res+=(i-q[tt]-1)*(h[i]-v);
        q[++tt]=i;
    }
    cout<<res<<endl;
}