
//9.5.52. 数组中出现次数超过一半的数字 

数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
假设数组非空，并且一定存在满足条件的数字。
思考题：
假设要求只能使用 O(n)的时间和额外 O(1)的空间，该怎么做呢？
样例
输入：[1,2,1,1,3]

输出：1

//因为某个数大于这个数组的一半，也就是说比其他所有数之和都多，采用配对的方法，一个目标数消除一个非目标数，最后剩下的还是目标数
class Solution {
public:
    int moreThanHalfNum_Solution(vector<int>& nums) {
        int v;//当前的数，如果这个数是目标数，那通过对消，一定可以留到最后，如果不是目标数，那就会被目标数对消成c<0,被替换成目标数
        int c=0;//对消剩下的个数
        for(int a:nums){
            if(a==v)c++;
            else{
                if(c==0){v=a;c++;}//c=0同时a和当前的数字v不相等(意思就是到目前为止，v有0个)，就替换到a(到目前为止，有1个)
                else c--;
            }
        }
        return v;
    }
};


//拓展：一个村子有n个人，超过一半的人是诚实的，其他的不诚实的，当问诚实的人某个人是否诚实，该人会诚实回答，当问不诚实的人某个人是否诚实，该人会撒谎，也有可能说真话，请找出一个诚实的人。
也是用同样的方法，对消