//8.1453. 移掉K位数字 

给定一个以字符串表示的非负整数 num，移除这个数中的 k位数字，使得剩下的数字最小。
注意：
空字符串被视为0。
如果结果中包含前导零，则需要将前导零删除，最后删除的前导零不用包含在移除的 k个数字中。
输入格式
第一行输入一个字符串，用来表示非负整数 num。第二行输入一个整数，表示 k。
输出格式
输出一个字符串，表示移除 k位数字后所能得到的最小数字。
数据范围0≤k≤字符串长度≤100000，num中不包含任何前导 0。

输入样例1：
1432219
3
输出样例1：
1219
样例1解释
移除掉三个数字 4,3,2,可形成一个新的最小的数字 1219。

输入样例2：
10200
1
输出样例2：
200
样例2解释：
移掉首位的1,剩下的数字为 200. 注意输出不能有任何前导零。
输入样例3：
10
2
输出样例3：
0
样例3解释
从原数字移除所有的数字，剩余为空就是 0。

//单调栈的方法
从左往右遍历，遇到下一个数字小于该数，就删除该数，如1432219，删除一个数就是4，第二个数就是3，第三个数就是2


#include<iostream>
#include<algorithm>

using namespace std;

int main(){
	string s;
	int k;
	cin>>s>>k;
	
	string str="0";
	for(int i=0;i<s.size();i++){
		while(k&&s[i]<str.back()){  //注意这里是while，有可能会一连串删除很多个数，比如5693，3，会在这个循环中删除9,6,5，最后返回3
			k--;
			str.pop_back();
		}
		str+=s[i];
	}
	while(k--)str.pop_back();
	int i=0;
	while(str[i]=='0'&& str!="0")i++;

	cout<<str.substr(i)<<endl;
	return 0;
	
}