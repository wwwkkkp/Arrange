//26.1536. 均分纸牌 


有N堆纸牌，编号分别为 1,2,…,N。
每堆上有若干张，但纸牌总数必为 N的倍数。
可以在任一堆上取若干张纸牌，然后移动。
移牌规则为：在编号为 1的堆上取的纸牌，只能移到编号为 2的堆上；在编号为 N的堆上取的纸牌，只能移到编号为 N−1的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。
现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。
例如 N=4,4 堆纸牌数分别为：(9,8,17,6)。移动 3次可达到目的：
从第三堆取四张牌放入第四堆，各堆纸牌数量变为:(9,8,13,10)。
从第三堆取三张牌放入第二堆，各堆纸牌数量变为:(9,11,10,10)。
从第二堆取一张牌放入第一堆，各堆纸牌数量变为:(10,10,10,10)。

输入格式
第一行包含整数 N。第二行包含 N个整数，A1,A2,…,AN 表示各堆的纸牌数量。
输出格式
输出使得所有堆的纸牌数量都相等所需的最少移动次数。
数据范围1≤N≤100,1≤Ai≤10000

输入样例：
4
9 8 17 6
输出样例：
3


//数学方法
#include<iostream>
#include<algorithm>

using namespace std;
const int N=110;
int n;
int a[N];

int main(){
    cin>>n;
    int b=0;
    for(int i=0;i<n;i++){
        cin>>a[i];
        b+=a[i];
    }
    int c=b/n;
    int res=0;
    int x=0;
    for(int i=0;i<n;i++){
        res+=a[i]-c;
        if(res)x++;
    }
    cout<<x<<endl;
    return 0;  
}


//假设n个点，a0,a1,a2.....an-1,an,a0和a1之间的移动关系是x1，a1和a2之间是x2，x1,x2....可能是+-0，有关系
a0-x1=^a,(^a为集合a的平均数)
a1+x1-x2=^a,
a2+x2-x3=^a,
.
.
.
an-1 + xn-1-xn=^a,
an+xn=^a;			  //注意：这个式子在后面没有用到，上一个式子就可以计算出xn-1,这个式子不行

变换一下：

x1=a0-^a;
x2=a1-^a+x1;
.
.
.
xn=an-1 - ^a +xn-1; 

统计x中不为零的数，就是结果

保证调度过程中不出现某堆纸牌为负数：
x0=0,a1和a0不用转移,
x0>0,a0给a1纸牌，则做完这一步之后，a0=^a，可以移动后面的
x0<0,a1给a0纸牌，那就先调整好a1~an的纸牌堆后，调整x0，


