

//理解MySQL索引的底层实现原理

理解索引的特性
	1,索引是帮助MySQL高效获取数据的排好序的数据结构
	2,索引存储在文件里
	
MySQL支持多种索引类型，如BTree索引，哈希索引，全文索引等等。主要讨论BTree索引，这也是我们平时用得最多的索引。


//索引的本质
MySQL官方对于索引的定义为:/索引是帮助MySQL高效获取数据的数据结构。 即可以理解为：索引是数据结构。

最基本的查询算法当然是顺序查找，当然这种时间复杂度为O(n)的算法在数据量很大时显然是糟糕的，于是有了二分查找、二叉树查找等。

二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树，但是数据本身的组织结构不可能完全满足各种数据结构;
/所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引.


//其他结构
	线性结构：读/写平均O(n)次
	二叉搜索树（BST）：读/写平均O(log2(n))次；如果树不平衡，则最差读/写O(n)次
	自平衡二叉搜索树（AVL）：在BST的基础上加入了自平衡算法，读/写最大O(log2(n))次
	红黑树（RBT）：另一种自平衡的查找树，读/写最大O(log2(n))次


//B Tree 和 B+Tree

B-树是一种m阶平衡树，叶子节点都在同一层，由于每一个节点存储的数据量比较大，索引整个B-树的层数是非常低的，基本上不超过三层。

由于磁盘的读取也是按block块操作的（内存是按page页面操作的）,
/因此B-树的节点大小一般设置为和磁盘块大小一致，这样一个B树节点，就可以通过一次磁盘IO把一个磁盘块的数据全部存储下来，
所以当使用B树存储索引的时候，磁盘I/O的操作次数是最少的（MySQL的读写效率，主要集中在磁盘I/O上）

那么MySQL最终为什么要采用B+树存储索引结构呢，那么看看B-树和B+树在存储结构上有什么不同？

1,	B树的每一个节点，存了关键字和对应的数据地址，而B+树的非叶子节点只存关键字，不存数据地址。
	因此B+树的每一个非叶子节点存储的关键字是远远多于B-树的，B+树的叶子节点存放关键字和数据，
	因此，从树的高度上来说，B+树的高度要小于B-树，使用的磁盘I/O次数少，因此查询会更快一些。
	
2,	/B树由于每个节点都存储关键字和数据，因此离根节点进的数据，查询的就快，离根节点远的数据，查询的就慢,
	/B+树所有的数据都存在叶子节点上，因此在B+树上搜索关键字，找到对应数据的时间是比较平均的，没有快慢之分。
	
3,	在B树上如果做区间查找，遍历的节点是非常多的;
	/B+树所有叶子节点被连接成了有序链表结构，因此做整表遍历和区间查找是非常容易的

//MySQL索引实现

1,MyISAM索引实现
MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。
见图
MyISAM的辅助索引也是一颗B+树，形式和主索引一样，//辅助索引 用来辅助主索引的树，当主索引找出100个元组，就可以用辅助索引去细分寻找

2,InnoDB索引实现
在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。
见图
,/因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有）

第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址，
//注意：innoDB的辅助索引和主索引有一点不一样，就是主索引存储的是数据记录，辅助索引存储的是主键的值；