

//MySQL索引的设计和使用策略、深入解析SQL性能优化

索引概述
所有 MySQL 列类型都可以被索引，对相关列使用索引是提高 SELECT 操作性能的最佳途径。//如果没有索引，select就只能全列扫描，比较慢，该列有索引后就可以用B+tree进行索引

每种存储引擎（如 MyISAM、InnoDB、BDB、MEMORY 等）对每个表至少支持 16 个索引，总索引长度至少为 256 字节。大多数存储引擎有更高的限制。//但是每个表一般不超过6个

,/MyISAM 和 InnoDB 存储引擎的表默认创建的都是 B+TREE 索引。MySQL支持前缀索引，即对索引字段的前 N 个字符创建索引，

MySQL 中还支持全文本（FULLTEXT）索引，该索引可以用于全文搜索。//只有MyISAM支持全文索引，并且只限于 CHAR、VARCHAR 和 TEXT 列
也可以为空间列类型创建索引，但是只有 MyISAM 存储引擎支持空间类型索引，且索引的字段必须是非空的。

,/默认情况下，MEMORY 存储引擎使用 HASH 索引，但也支持 BTREE 索引。


//设计索引的原则
1,	使用惟一索引。考虑某列中值的分布。索引的列的基数越大，区分度越高，索引的效果越好。//如生日就比较好，但是性别就不好

2,	使用短索引。如果对字符串列进行索引，应该指定一个前缀长度//如果一个char(200),但是大多数元组都只用到了前10个字符，设置一个长度会快很多
	较小的索引涉及的磁盘 IO 较少，较短的值比较起来更快。更为重要的是，对于较短的键值，索引高速缓存中的块能容纳更多的键值，
	
3,	利用最左前缀,可利用索引中最左边的列集来匹配行。这样的列集称为最左前缀。

4,	不要过度索引。
	,/每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。索引太多，也可能会使 MySQL 选择不到所要使用的最好索引。只保持所需的索引有利于查询优化。

5,	/当表中同时有几个列都是唯一的，都可以作为主键的时候，要选择最常作为访问条件的列作为主键，提高查询的效率。
	主键要尽可能选择 较短的数据 类型，可以有效地减少索引的磁盘占用，提高索引的缓存效果。
	
//优化 SQL 语句的一般步骤

通过 show status 命令了解各种 SQL 的执行频率
MySQL 客户端连接成功后，通过下述命令可以提供服务器状态信息：
	show status like 'Com_%'
就可以查看每一个关键词的使用频率：
	Com_select：执行 select 操作的次数，一次查询只累加 1。
	Com_insert：执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。
	Com_update：执行 UPDATE 操作的次数。
	Com_delete：执行DELETE 操作的次数。
	...

下面这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。
	Innodb_rows_read：select 查询返回的行数。
	Innodb_rows_inserted：执行 INSERT 操作插入的行数。
	Innodb_rows_updated：执行 UPDATE 操作更新的行数。
	Innodb_rows_deleted：执行 DELETE 操作删除的行数。
,/通过以上几个参数，可以很容易地了解当前数据库的应用是以 插入更新 为主还是以 查询操作 为主，
对于事务型的应用，通过 Com_commit 和Com_rollback 可以了解事务提交和回滚的情况.


//定位执行效率较低的 SQL 语句

1,通过慢查询日志定位那些执行效率较低的 SQL 语句
2,慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用  show processlist  命令查看当前MySQL 在进行的线程


//通过 EXPLAIN 分析低效 SQL 的执行计划
通过以上步骤查询到效率低的SQL 语句后，可以通过 EXPLAIN 或者 DESC 命令获取MySQL 如何执行 SELECT 语句的信息
见 https://zhaoyang.blog.csdn.net/article/details/90386298

//确定问题并采取相应的优化措施
如果是全表扫描导致结果不理想，就建立索引

//MySQL 如何使用索引

查询要使用索引最主要的条件是查询条件中需要使用索引关键字。
如果是多列索引，那么只有查询条件使用了多列关键字最左边的前缀时，才可以使用索引，否则将不能使用索引。

在 MySQL 中，下列几种情况下有可能使用到索引：
	1,创建的多列索引，只要查询的条件中用到了最左边的列，索引一般就会被使用
	2,使用 like 的查询，后面如果是常量并且只有％号不在第一个字符时，索引才可能会被使用。
	3,对大的文本进行搜索，使用全文索引而不用使用 like ‘%…%’。
	4,列名是索引，使用column_name is null 将使用索引。

在下列情况下，虽然存在索引，但是MySQL 并不会使用相应的索引:
	1,/如果 MySQL 估计使用索引比全表扫描更慢，则不使用索引。
	2,用or 分割开的条件，如果 or 前的条件中的列有索引，而后面的列中没有索引， 那么涉及到的索引都不会被用到。
	3,不使用联合索引列的第一部分，那么在查询中这个索引也不会被MySQL 采用。
	4,如果 like 是以％开始，那么MySQL 也不会采用这个索引。

//索引优化
	1,对查询进行优化，应尽量避免全表扫描
	2,应尽量避免在 where 子句中使用 or 来连接条件，否则将导致MySQL放弃使用索引而进行全表扫描
	3,in 和 not in 也要慎用,能用 between 就不要用 in 了
	4,应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。
		如：select id from t where num/2=100应改为:select id from t where num=100*2
	5,应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。
		如：select id from t where substring(name,1,3)=‘abc’ ，name以abc开头的id，应改为:select id from t where name like ‘abc%’
	6,不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。
		如：select id from t where num/2=100;   应改为:select id from t where num=100*2
	7,如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引
	8,并不是所有索引对查询都有效
	9,索引并不是越多越好,/ 一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。
	10,尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间
	11,尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。
