


//浅析MySQL体系结构与存储引擎

MySQL是一个可移植的数据库，几乎能在当前所有操作系统上运行,尽管各种系统在底层（如线程）实现方面各有不同，但是MySQL几乎能保证在各平台上的物理体系结构的一致性。

1,数据库和实例的概念和区别
数据库：文件的集合，是按照某种数据模型组织起来的并以二进制存储的数据集合。其实就是字面意思，就是数据库本身
数据库实例 	是应用程序, 是位于用户与操作系统之间的一层数据管理软件 ，用户对数据库进行操作，
			包括定义表结构，数据查询，数据维护等控制，都是在数据库实例下进行的，可以这样理解，应用程序通过数据库实例才能和数据库打交道。

在MySQL中，实例和数据库的通常关系是一一对应的，即一个实例对应一个数据库，一个数据库对应一个实例。

,/MySQL被设计为一个单进程多线程架构的数据库，MySQL数据库实例在系统上的表现就是一个进程。

当启动实例时，MySQL数据库会去读取配置文件，根据配置文件的参数来启动数据库实例，这与Oracle的参数文件（spfile）相似，不同的是，在Oracle中如果没有参数文件，启动时会提示找不到该参数文件，数据库启动失败。而在MySQL数据库中，可以没有配置文件，这种情况下，MySQL会按照编译时的默认参数设置启动实例。


//MySQL体系结构
MySQL从概念上分为四层:网络连接层，服务层（核心层），存储引擎层，系统文件层

1,网络接入层
,/主要负责连接管理、授权认证、安全等等。每个客户端连接都对应着服务器上的一个线程。服务器上维护了一个线程池，避免为每个连接都创建销毁一个线程。

为什么要设计成线程池？
在服务器内部，每个client都要有自己的线程。这个连接的查询都在一个单独的线程中执行。想象现实场景中数据库访问连接实在是太多了，如果每次连接都要创建一个线程，同时还要负责该线程的销毁。对于系统来说是多么大的消耗。由于线程是操作系统宝贵的资源。这时候线程池的出现就显得自然了，服务器缓存了线程，因此不需要为每个Client连接创建和销毁线程。


2,服务层
,/,第二层服务层是MySQL的核心，MySQL的核心服务层都在这一层,查询解析，SQL执行计划分析，SQL执行计划优化，查询缓存。
	以及跨存储引擎的功能都在这一层实现：存储过程，触发器，视图等。

简单分析SQL语句在服务层中具体的流程：
	1,查询缓存		//注意：只有InnoDB引擎支持数据缓存
	在解析查询之前，服务器会检查查询缓存，如果能找到对应的查询，服务器不必进行查询解析、优化和执行的过程，直接返回缓存中的结果集。
	
	2,解析器与预处理器
	MySQL会解析查询，并创建了一个内部数据结构（解析树）。这个过程解析器主要通过语法规则来验证和解析，检查语法对不对，
	预处理会根据MySQL的规则进一步检查解析树是否合法，查询的表存不存在等
	
	3,查询优化器
	优化器将其转化成查询计划。一条查询可以有很多种执行方式，最后都返回相应的结果。优化器的作用就是找到这其中最好的执行计划。
	优化器并不关心使用的什么存储引擎，但是存储引擎对优化查询是有影响的。优化器要求存储引擎提供容量或某个具体操作的开销信息来评估执行时间。
	
	4,查询引擎
	在完成解析和优化阶段以后，MySQL会生成对应的执行计划，查询执行引擎根据执行计划给出的指令调用存储引擎的接口得出结果。

3,存储引擎层
,/存储引擎层负责MySQL中数据的存储与提取。通过接口屏蔽了不同存储引擎之间的差异。
MySQL采用插件式的存储引擎。MySQL为我们提供了许多存储引擎，每种存储引擎有不同的特点。

特点:/存储引擎是针对于表的而不是针对库的（一个库中不同表可以使用不同的存储引擎），服务器通过API与存储引擎进行通信，用来屏蔽不同存储引擎之间的差异。

4,系统文件层
该层主要是将数据库的数据存储在文件系统之上，并完成与存储引擎的交互。


//MySQL存储引擎
,/数据库存储引擎是数据库底层的软件组织，数据库管理系统（DBMS）使用数据库引擎进行创建、查询、更新和删除数据。
,/不同的存储引擎提供不同的存储机制、索引技巧、锁定水平的功能，使用不同的存储引擎，还可以获得特定的功能（不同的存储引擎采用的底层构架不同，支持的功能不同，主要是底层的算法设计不同）。
现在许多不同的数据库管理系统都支持多种不同的数据引擎。MySql的核心就是存储引擎。


1,MyISAM存储引擎:
MyISAM基于ISAM存储引擎，并对其进行扩展。它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一;
/MyISAM拥有较高的插入、查询速度，但不支持事务，不支持外键。优势是访问速度快，对事务完整性没有要求，以select，insert为主的应用基本上可以用这个引擎来创建表。

MylSAM存储引擎的表存储成3个文件。文件的名字与表名相同。	扩展名包括sdi、 MYD和MYL，其中，
	sdi为扩展名的文件存储表的结构；					//表的结构
	MYD为扩展名的文件存储数据， 其是MYData的缩写；	//数据
	MYI为扩展名的文件存储索引，其是MYIndex的缩写。	//索引
	
基于MylSAM存储引擎的表支持3种不同的存储格式。包括静态型、动态型和压缩型:
	静态表:静态型为MylSAM存储引繁的默认存储格式,
			/其字段是固定长度的，具体来说表中的字段都是非变长字段，这样每个记录都是固定长度的，优点是存储非常迅速，容易缓存，出现故障容易恢复；
			缺点是占用的空间通常比动态表多（因为存储时会按照列的宽度定义补足空格）;
			/ps：在取数据的时候，默认会把字段后面的空格去掉，如果不注意会把数据本身带的空格也会忽略。
	
	动态表:/动态型包含变长字段，记录的长度不是固定长度的，
			这样存储的优点是占用的空间相对较少；
			缺点：频繁的更新、删除数据容易产生碎片，需要定期执行OPTIMIZE TABLE或者myisamchk-r命令来改善性能
	
	压缩表：压缩型需要使用myisampack工具创建，占用的磁盘空间较小,
			/因为每个记录是被单独压缩的，所以只有非常小的访问开支
	

2,InnoDB存储引擎
InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），其它存储引擎都是非事务安全表,/支持行锁定和外键，MySQL5.5以后默认使用InnoDB存储引擎。
	//事务安全表：	支持批处理，当做一个完整的任务统一提交或回滚，即对包含在事务中的多条语句要么全执行，要么全部不执行。
	//				如插入100个元组，第50个的时候出现问题，innoDB可以删除前面已经插入的，并报错，但是其他引擎就不能，前面插入的50个还留在那儿，后面可能重复插入

InnoDB的主要特性：
	1,	为MySQL提供了具有提交、回滚和崩溃恢复能力的事务安全（ACID兼容）存储引擎。
		在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合。
		
	2,	InnoDB表的自动增长列可以手工插入，但是插入的如果是空或0，则实际插入到则是自动增长后到值。
		可以通过"ALTER TABLE…AUTO_INCREMENT=n;"语句强制设置自动增长值的起始值，默认为1，
		但是该强制到默认值是保存在内存中，数据库重启后该值将会丢失。
		可以使用LAST_INSERT_ID()查询当前线程最后插入记录使用的值
	
	3,对于InnoDB表，自动增长列必须是索引。如果是组合索引，也必须是组合索引的第一列.//自动增长就是某一列的数不用单独给出，在上一行的基础上+1	
	
	4,	/MySQL支持外键的存储引擎只有InnoDB，在创建外键的时候，父表必须有对应的索引，子表在创建外键的时候也会自动创建对应的索引。
		当某个表被其它表创建了外键参照，那么该表对应的索引或主键被禁止删除。

InnoDB存储引擎的总结如下：
	1,支持事务、支持外键
	2,支持自动增长列
	3,写的处理效率差一些，占用更多的磁盘空间以保留数据和索引
	4,支持外键

3,MEMORY存储引擎
MEMORY存储引擎是MySQL中的一类特殊的存储引擎。其使用存储在内存中的内容来创建表，而且所有数据也放在内存中。

	1,	/每个基于MEMORY存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为frm类型。该文件中只存储表的结构，而其数据文件，都是存储在内存中。
		有利于对数据的快速的处理，提高整个表的处理效率
	
	2,	MEMORY存储引擎默认使用哈希（HASH）索引。其速度要比使用B树（BTREE） 索引快。
	
	3,	MEMORY存储引擎通常很少用到。因为MEMORY表的所有数据是存储在内存上的，如果内存出现异常就会影响到数据的完整性;
		/如果重启机器或者关机，表中的所有数据将消失。因此，基于MEMORY存储引擎的表的生命周期很短，一般都是一次性的。		
	
	4,	/MEMORY表的大小是受到限制的。
		表的大小主要取决于两个参数，分别是max_rows 和 max_heap_table_size。

		max_rows 可以在创建表时指定；max_heap_table_size 的大小默认为 16MB，可以按需要进行扩大。
		,/因此，其存在于内存中的特性，这类表的处理速度非常快。但是，其数据易丢失，生命周期短。
		
//比较
	1,InnoDB存储引擎:	/InnoDB存储引擎支持事务处理，支持外键，同时支持崩溃修复能力和并发控制;
						/如果需要对事务的完整性要求比较高，要求实现并发控制， 那选择InnoDB存储引擎有其很大的优势。
						如果需要频繁的进行更新、删除操作的数据库，也可以选择InnoDB存储引擎。因为，该类存储引擎可以实现事务的提交 (Commit)和回滚(Rollback)。
						
	2,MylSAM存储引擎:	/MylSAM存储引擎的插入数据快，空间和内存使用比较低。
						如果表主要是用于插入新纪录和读出记录，那么选择MylSAM存储引擎能实现处理的高效率。如果应用的完整性、并发性要求很低，也可以选择MylSAM存储引擎。
	
	3,MEMORY存储引擎:	/MEMORY存储引擎的所有数据都在内存中，数据的处理速 度快，但安全性不高。
						如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMORY存储引擎。
						MEMORY存储引擎对表的大小有要求，不能建立太大的表。所以，这类数据库只使用与相对较小的数据库表。


