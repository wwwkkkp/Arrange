/*319. 灯泡开关

初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。

示例:

输入: 3
输出: 1 
解释: 
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭]. 

你应该返回 1，因为只有一个灯泡还亮着。

*/

class Solution {
public:
    int bulbSwitch(int n) {
        return sqrt(n);
    }
};


/*
什么条件下会翻转

第18个灯泡会在1,2,3,6,9,18轮翻转。
第36个灯泡会在1,2,3,4,6,9,12,18,36轮翻转。

规律显而易见，只有在轮数是该位置因数的时候才会执行翻转操作。

如果等于9，翻转之后就会 翻转，因为 9是3的倍数 所以在3的倍数的时候，反之后就不会反回来，所以1,4,9,16,25这些数都不会反过来，所以就是看 平方数 的个数，所以直接返回sqrt(n),就可以了。
*/

