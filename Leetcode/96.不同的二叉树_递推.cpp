//不同的二叉树
/*

给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

注意是结构，134和123的结构是一样的

这道题可以转化为：
当n=5时，头结点有5种选择方式
当头结点是3时，左边的数是1 2 右边的数是4 5
左边和右边都转化成了n=2时的搜索树的数量，然后把左右数量相乘就是头结点是3时的树的数量，
把5个头结点的树数量相加，就是整n=5的树数量，代码如下：

*/

class Solution {
public:
    int numTrees(int n) {
        vector<int> dp(n+1,0);
        //int dp[n+1];
        //for(int i=0;i<n+1;i++)
        //    dp[i]=0;
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++)
            for(int j=1;j<=i;j++){
                dp[i]+=dp[j-1]*dp[i-j];
            } 
        return dp[n];
    }
};