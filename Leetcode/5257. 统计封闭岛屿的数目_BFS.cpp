/*
5257. 统计封闭岛屿的数目 

有一个二维矩阵 grid ，每个位置要么是陆地（记号为 0 ）要么是水域（记号为 1 ）。

我们从一块陆地出发，每次可以往上下左右 4 个方向相邻区域走，能走到的所有陆地区域，我们将其称为一座「岛屿」。

如果一座岛屿 完全 由水域包围，即陆地边缘上下左右所有相邻区域都是水域，那么我们将其称为 「封闭岛屿」。

请返回封闭岛屿的数目。

示例 1：

输入：grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
输出：2
解释：
灰色区域的岛屿是封闭岛屿，因为这座岛屿完全被水域包围（即被 1 区域包围）。


示例 2：

输入：grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
输出：1
示例 3：

输入：grid = [[1,1,1,1,1,1,1],
             [1,0,0,0,0,0,1],
             [1,0,1,1,1,0,1],
             [1,0,1,0,1,0,1],
             [1,0,1,1,1,0,1],
             [1,0,0,0,0,0,1],
             [1,1,1,1,1,1,1]]
输出：2
*/

//BFS，遇到一个零，把所有和这个零相连的零遍历一遍，如果其中有与边相连的，就不加num

class Solution {
public:
    vector<vector<int>>dir={{1,0},{-1,0},{0,1},{0,-1}};
    int closedIsland(vector<vector<int>>& grid) {
        queue<vector<int>>q;
        int nums=0;
        for(int i=0;i<grid.size();i++)
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==0){
                    vector<int>v={i,j};
                    q.push(v);
                    int flag=0;
                    while(!q.empty()){  //所有和[i,j]相连的零都会遍历到
                        vector<int> v1=q.front();
                        q.pop();
                        if(v1[0]<=0||v1[0]>=grid.size()-1||v1[1]<=0||v1[1]>=grid[0].size()-1) //如果遍历到的值有与边相连的，
                            flag=1;  //标志位置1
                        for(int m=0;m<4;m++){
                            int a0=v1[0]+dir[m][0];
                            int a1=v1[1]+dir[m][1];
                            if(a0>=0&&a0<grid.size()&&a1>=0&&a1<grid[0].size()&&grid[a0][a1]==0){
                                grid[a0][a1]=1; //遍历过的点就置1，下次就不会遍历了
                                vector<int> v2={a0,a1};
                                q.push(v2);
                            }
                                
                        }
                    }
                    if(flag==0) //置1以后就不加了
                        nums++;
                
                }
            }
        return nums;
    }
};