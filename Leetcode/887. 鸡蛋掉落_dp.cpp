
//887. 鸡蛋掉落
你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。

每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。

你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。

每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。

你的目标是确切地知道 F 的值是多少。

无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？

 

示例 1：

输入：K = 1, N = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
如果它没碎，那么我们肯定知道 F = 2 。
因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
示例 2：

输入：K = 2, N = 6
输出：3
示例 3：

输入：K = 3, N = 14
输出：4
 

提示：

1 <= K <= 100
1 <= N <= 10000




class Solution {
public:
    int superEggDrop(int K, int N) {
        int f[11000][110];

        f[0][0]=0;
        f[0][1]=0;
        for(int i=1;i<=N;i++){//测i次，j个鸡蛋，最多测多少层楼
            for(int j=1;j<=K;j++){
                f[i][j]=1+f[i-1][j-1]+f[i-1][j];//如果最多侧的那一层楼碎了，就是 f[i-1][j-1]，测i-1，j-1个鸡蛋最多测的次数，没有碎就是 f[i-1][j]，加上当前测的这一层，就是最终结果
                if(f[i][K]>=N){
                    return i;
                }
            }
        }
        return 0;
    }
};