
//POISX线程


//线程的基本概念
,/线程是一个进程内部的一个控制序列
有了多个控制线程以后，在程序设计时可以把进程设计成在同一时刻能够做不止一件事，每个线程处理各只独立的任务。

为什么要引入线程

1,引入进程线程是为了更好的实现并发。
2,/进程是最小的资源分配单位，线程是最小的活动执行单元。
3,每个进程都默认自己有4G的独立空间，进程的切换过于耗费系统资源。
4,线程是进程内部更小的执行单元，一个进程可以有多个线程，完成不同的任务。
5,在同线程之间切换任务比进程的切换要消耗少很多。

/**
线程与进程的区别
① 	进程是资源分配的最小单位，线程是程序执行的最小单位。
② 	进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。
	而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。
③ 	线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。
④ 	多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。
*/

用户级线程和内核级线程  11.7  11.8
用户级线程：把整个线程实现部分放在用户空间中，内核对线程一无所知，内核看到的就是一个单线程进程。只有一个用户栈，但是进程内部有一个线程控制块(TCB)，用于控制本进程的线程
内核级线程：在内核中有一个用来记录系统中所有线程的线程表（TCB，进程表PCB），当某个线程希望创建一个新线程或撤销一个已有线程时，它进行一个系统调用，这个系统调用通过对线程表的更新完成线程的创建或撤销工作

//用户级线程和内核级线程的区别

1,/内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。
2,用户级线程的创建、撤消和调度不需要OS内核的支持，是在语言（如Java）这一级处理的；
	而内核支持线程的创建、撤消和调度都需OS内核提供支持，而且与进程的创建、撤消和调度大体是相同的。
	
3,用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。

4,/在只有用户级线程的系统内，CPU调度还是以进程为单位/，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行;
	/在有内核支持线程的系统内，CPU调度则以线程为单位/，由OS的线程调度程序负责线程的调度。
	
5,/用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。


//线程同步
多个线程同时运行的时候可能调用线程函数，在多个线程同时对同一个内存地址进行写入，由于CPU时间调度上的问题，写入数据会被多次的覆盖，

实现线程同步的几种方法
	信号量
	互斥锁
	条件变量
	读写锁
	


